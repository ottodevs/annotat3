// TODO: needed by useState, move to another file
"use client"
import { useEffect, useState } from 'react'

import { CeramicContextProvider, useCeramicContext } from '@/context/ceramic.context'
import '../globals.css'

import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import { Profile } from '@/types'
import Sidebar from '@/components/sidebar.component'
import SidebarProvider from '@/providers/SidebarProvider'
import { authenticateCeramic } from '@/util/authentication'
import { Wagmi } from '@/components/wagmi.component'
import Link from 'next/link'
import { Button } from '@/components/ui/button'

const inter = Inter({ subsets: ['latin'] })

// export const metadata: Metadata = {
//   title: 'Home',
//   description: 'Generated by create next app',
// }

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const clients = useCeramicContext();
  const { ceramic, composeClient } = clients;
  const [profile, setProfile] = useState<Profile | undefined>();
  const [loading, setLoading] = useState<boolean>(false);
  const [auth, setAuth] = useState<boolean>(false);

  //runs on useeffect
  const handleLogin = async () => {
    await authenticateCeramic(ceramic, composeClient);
    if (localStorage.getItem("did")) {
      setAuth(true);
    }
  };

  //sign in with Ethereum
  const authenticate = async () => {
    await authenticateCeramic(ceramic, composeClient);
    if (localStorage.getItem("did")) {
      setAuth(true);
    }
  };

  //use this method to encrypt a string
  const encrypt = async (input: string) => {
    const result = await fetch("/api/encrypt", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(input),
    });
    const item = await result.json();
    return item.message;
  };

  //use this method to decrypt a string
  const decrypt = async (input: string) => {
    const result = await fetch("/api/decrypt", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(input),
    });
    const item = await result.json();
    return item.message;
  };

  useEffect(() => {
    if (localStorage.getItem("did")) {
      handleLogin();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <html lang="en">
      <body className={inter.className}>
        <CeramicContextProvider>
          <div>
          <Wagmi />
          {auth ? (
            <Button
            onClick={() => {
              alert("You are already authenticated");
            }}
            style={{ margin: "auto", alignContent: "center" }}
            >
              Authenticated
            </Button>
          ) : (
            <Button
            onClick={() => {
              authenticate();
            }}
            style={{ margin: "auto", alignContent: "center" }}
            >
              Authenticate ceramic
            </Button>
          )}

          </div>
          <Link href="/annotation">Start annotating</Link>
          <SidebarProvider>
          <section className="flex h-screen w-full">
              <Sidebar />

              {/* Navbar & Main Content */}
              <div className="h-full w-full bg-lightPrimary dark:!bg-navy-900 mr-4">

                {/* Main Content */}
                <main className='mx-[12px] h-full flex-none transition-all md:pr-2 xl:ml-[313px]' >
                  {/* Routes */}
                  <div className="h-full">
                    {/* <Navbar /> */}

                    <div className="pt-5s mx-auto mb-auto h-full min-h-[84vh] p-2 md:pr-2">
      {children}
    </div>

                    <div className="p-3">
                      {/* <Footer /> */}
                    </div>
                  </div>
                </main>

              </div>

            </section>
          </SidebarProvider>
          {/* <Sidebar name={profile?.name} username={profile?.username} id={profile?.id} />
          {children} */}
        </CeramicContextProvider>

      </body>
    </html>
  )
}
